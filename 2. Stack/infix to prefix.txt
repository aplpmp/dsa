#include <iostream>
#include <stack>
#include <algorithm>
using namespace std;

int precedence(char c) {
    if (c == '^' || c == '$')
        return 3;
    if (c == '*' || c == '/')
        return 2;
    if (c == '+' || c == '-')
        return 1;
    return -1;
}

string InfixToPrefix(string infix) {
    string prefix;
    reverse(infix.begin(), infix.end());

    for (int i = 0; i < infix.length(); i++) {
        if (infix[i] == '(')
            infix[i] = ')';
        else if (infix[i] == ')')
            infix[i] = '(';
    }

    stack < char > s;

    for (int i = 0; i < infix.length(); i++) {
        if (isalnum(infix[i]))
            prefix += infix[i];
        else if (infix[i] == '(')
            s.push(infix[i]);
        else if (infix[i] == ')') {
            while (!s.empty() && s.top() != '(') {
                prefix += s.top();
                s.pop();
            }
            if (!s.empty() && s.top() == '(')
                s.pop();
        } else {
            while (!s.empty() && precedence(infix[i]) < precedence(s.top())) {
                prefix += s.top();
                s.pop();
            }
            s.push(infix[i]);
        }
    }

    while (!s.empty()) {
        prefix += s.top();
        s.pop();
    }

    reverse(prefix.begin(), prefix.end());
    return prefix;
}

int main() {
    string exp;
    cout << "Enter Infix Expression: ";
    cin >> exp;
    cout << "Prefix Expression: " << InfixToPrefix(exp);

    return 0;
}